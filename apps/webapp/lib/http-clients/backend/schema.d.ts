/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/health': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations['AppController_healthCheck'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/articles': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List articles with pagination
		 * @description Returns articles sorted by creation date (newest first)
		 */
		get: operations['ArticlesController_findAll'];
		put?: never;
		/** Create a new article */
		post: operations['ArticlesController_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/articles/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete article */
		delete: operations['ArticlesController_remove'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/articles/query': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Query articles with filters and sorting
		 * @description Returns filtered and sorted articles with pagination
		 */
		post: operations['ArticlesController_queryArticles'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/articles/stats': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get article statistics
		 * @description Returns aggregated statistics about articles
		 */
		get: operations['ArticlesController_getStats'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/feeds': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all feeds */
		get: operations['FeedsController_findAll'];
		put?: never;
		/** Create a new feed from RSS URL */
		post: operations['FeedsController_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/feeds/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get a feed by ID */
		get: operations['FeedsController_findOne'];
		put?: never;
		post?: never;
		/** Delete a feed */
		delete: operations['FeedsController_remove'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/feeds/{id}/status': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/** Update feed status and scraping interval */
		patch: operations['FeedsController_updateStatus'];
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		CreateArticleDto: {
			title: string;
			subtitle: string;
			url: string;
			source: string;
			/** Format: date-time */
			publishedAt: string;
			externalId: string;
			content?: string;
			author?: string;
			description?: string;
			imageUrl?: string;
			categories?: string[];
		};
		ArticleDto: {
			/** @description Article ID */
			id: string;
			title: string;
			subtitle: string;
			content?: string;
			url: string;
			source: string;
			author?: string;
			description?: string;
			imageUrl?: string;
			categories: string[];
			/** Format: date-time */
			publishedAt: string;
			externalId: string;
			enrichment?: Record<string, never>;
			/** Format: date-time */
			createdAt: string;
			/** Format: date-time */
			updatedAt: string;
		};
		PaginatedArticlesDto: {
			items: components['schemas']['ArticleDto'][];
			total: number;
			page: number;
			totalPages: number;
			hasNextPage: boolean;
			hasPreviousPage: boolean;
		};
		ArticleFilterDto: {
			title?: string;
			subtitle?: string;
			source?: string;
			author?: string;
			categories?: string[];
			/** Format: date-time */
			publishedAtFrom?: string;
			/** Format: date-time */
			publishedAtTo?: string;
		};
		ArticleSortDto: {
			/** @enum {string} */
			title?: 'asc' | 'desc';
			/** @enum {string} */
			publishedAt?: 'asc' | 'desc';
			/** @enum {string} */
			createdAt?: 'asc' | 'desc';
		};
		QueryArticlesDto: {
			filter?: components['schemas']['ArticleFilterDto'];
			sort?: components['schemas']['ArticleSortDto'];
			/** @default 1 */
			page: number;
			/** @default 10 */
			limit: number;
		};
		ArticleStatsDto: {
			/** @description Total number of articles */
			totalArticles: number;
			/**
			 * @description Count of articles per provider/source
			 * @example {
			 *       "ynet": 150,
			 *       "mako": 200
			 *     }
			 */
			articlesPerProvider: Record<string, never>;
			/**
			 * @description List of distinct providers/sources
			 * @example [
			 *       "ynet",
			 *       "mako"
			 *     ]
			 */
			providers: string[];
			/** @description Number of scraped articles */
			scrapedCount: number;
			/** @description Number of enriched articles */
			enrichedCount: number;
		};
		CreateFeedDto: {
			/**
			 * @description The news provider name (e.g., ynet, mako)
			 * @example ynet
			 */
			provider: string;
			/**
			 * @description The RSS feed URL
			 * @example http://www.ynet.co.il/Integration/StoryRss2.xml
			 */
			url: string;
			/**
			 * @description Categories for the feed content
			 * @example [
			 *       "news",
			 *       "general"
			 *     ]
			 */
			categories: string[];
		};
		FeedDto: {
			/** @description Feed ID */
			id: string;
			/** @description The name of the feed */
			name: string;
			/** @description The RSS feed URL */
			url: string;
			/** @description The news provider name */
			provider: string;
			/** @description The feed language */
			language: string;
			/**
			 * @description Whether the feed is active
			 * @default true
			 */
			isActive: boolean;
			/** @description Feed categories */
			categories: string[];
			/** @description Feed description */
			description?: string;
			/**
			 * @description Scraping interval in minutes
			 * @default 5
			 */
			scrapingInterval: number;
			/**
			 * Format: date-time
			 * @description Last scraping timestamp
			 */
			lastScrapedAt: string;
		};
		UpdateFeedStatusDto: {
			/**
			 * @description Whether the feed is active
			 * @example true
			 */
			isActive: boolean;
			/**
			 * @description Scraping interval in minutes (-1 for inactive)
			 * @example 5
			 */
			scrapingInterval?: number;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	AppController_healthCheck: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	ArticlesController_findAll: {
		parameters: {
			query?: {
				/** @description Page number (1-based) */
				page?: number;
				/** @description Number of items per page */
				limit?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns paginated list of articles */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PaginatedArticlesDto'];
				};
			};
		};
	};
	ArticlesController_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateArticleDto'];
			};
		};
		responses: {
			/** @description The article has been successfully created. */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ArticleDto'];
				};
			};
			/** @description Invalid article data. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	ArticlesController_remove: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Article ID */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The article has been deleted */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Article not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	ArticlesController_queryArticles: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['QueryArticlesDto'];
			};
		};
		responses: {
			/** @description Returns filtered and paginated list of articles */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PaginatedArticlesDto'];
				};
			};
		};
	};
	ArticlesController_getStats: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns article statistics */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['ArticleStatsDto'];
				};
			};
		};
	};
	FeedsController_findAll: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns all feeds */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['FeedDto'][];
				};
			};
		};
	};
	FeedsController_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateFeedDto'];
			};
		};
		responses: {
			/** @description The feed has been successfully created. */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['FeedDto'];
				};
			};
			/** @description Invalid feed data or RSS URL. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Feed with this URL already exists. */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	FeedsController_findOne: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Feed ID */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Returns the feed */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['FeedDto'];
				};
			};
			/** @description Feed not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	FeedsController_remove: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Feed ID */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The feed has been deleted */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Feed not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	FeedsController_updateStatus: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Feed ID */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['UpdateFeedStatusDto'];
			};
		};
		responses: {
			/** @description The feed status has been updated */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['FeedDto'];
				};
			};
			/** @description Invalid status data */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Feed not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
