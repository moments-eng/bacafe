/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feeds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all feeds */
        get: operations["FeedsController_findAll"];
        put?: never;
        /** Create a new feed from RSS URL */
        post: operations["FeedsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feeds/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a feed by ID */
        get: operations["FeedsController_findOne"];
        put?: never;
        post?: never;
        /** Delete a feed */
        delete: operations["FeedsController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feeds/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update feed status and scraping interval */
        patch: operations["FeedsController_updateStatus"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateFeedDto: {
            /**
             * @description The news provider name (e.g., ynet, mako)
             * @example ynet
             */
            provider: string;
            /**
             * @description The RSS feed URL
             * @example http://www.ynet.co.il/Integration/StoryRss2.xml
             */
            url: string;
            /**
             * @description Categories for the feed content
             * @example [
             *       "news",
             *       "general"
             *     ]
             */
            categories: string[];
        };
        FeedDto: {
            /** @description Feed ID */
            id: string;
            /** @description The name of the feed */
            name: string;
            /** @description The RSS feed URL */
            url: string;
            /** @description The news provider name */
            provider: string;
            /** @description The feed language */
            language: string;
            /**
             * @description Whether the feed is active
             * @default true
             */
            isActive: boolean;
            /** @description Feed categories */
            categories: string[];
            /** @description Feed description */
            description?: string;
            /**
             * @description Scraping interval in minutes
             * @default 5
             */
            scrapingInterval: number;
            /**
             * Format: date-time
             * @description Last scraping timestamp
             */
            lastScrapedAt: string;
        };
        UpdateFeedStatusDto: {
            /**
             * @description Whether the feed is active
             * @example true
             */
            isActive: boolean;
            /**
             * @description Scraping interval in minutes (-1 for inactive)
             * @example 5
             */
            scrapingInterval?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FeedsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all feeds */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedDto"][];
                };
            };
        };
    };
    FeedsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFeedDto"];
            };
        };
        responses: {
            /** @description The feed has been successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedDto"];
                };
            };
            /** @description Invalid feed data or RSS URL. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Feed with this URL already exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FeedsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Feed ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the feed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedDto"];
                };
            };
            /** @description Feed not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FeedsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Feed ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The feed has been deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Feed not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FeedsController_updateStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Feed ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateFeedStatusDto"];
            };
        };
        responses: {
            /** @description The feed status has been updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedDto"];
                };
            };
            /** @description Invalid status data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Feed not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
